library(aweSOM)
aweSOM()
?nnet
library(nnet)
?nnet
mlp <- nnet(x= regmat[train, ], y= can$travail.dom[train],
size= 16, linout= T)
## 25/01/2018 : TD Apprentissage statistique (réseaux de neurones)
## Données : Extrait du recensement canadien 2006, fichier des particuliers, pop 20 à 64 ans
## Variables recodées :
## - age.grp : groupe d'age (par 5 ans)
## - sexe
## - province
## - mar.st : statut marital
## - fam.size : taille de la famille
## - immigre
## - vismin : minorité visible
## - diplome : plus haut diplôme
## - loginc : revenu total (après impôt) logarithmique
## - weeks.worked : nombre de semaines travaillées
## - travail.dom : heures hebdomadaires de travail domestique (ménage, enfants, âgés)
## - proprio : logement possédé
can <- read.csv("~/recherche/data/divers/CanCensus2006/can-census-2006-small.csv")
str(can)
summary(can)
## Echantillons : train, valid, test
set.seed(25012018)
echant <- sample(c("train", "valid", "test"), nrow(can), replace = T,
prob= c(.7, .15, .15))
train <- echant == "train"
valid <- echant == "valid"
test <- echant == "test"
## Données normalisées (et fonction pour transformer une data.frame en matrice normalisée)
regmat <- model.matrix(travail.dom ~ ., can)[, -1]
regmat.mean <- colMeans(regmat)
regmat.sd <- apply(regmat, 2, sd)
regmat <- scale(regmat)
## Fonctions
rmse <- function(truth, pred) sqrt(mean((truth - pred)^2))
source("~/recherche/code/fonctions/pred-tools.R")
toXmat <- function(x)
scale(model.matrix(~., x)[, -1], center= regmat.mean, scale= regmat.sd)
mlp <- nnet(x= regmat[train, ], y= can$travail.dom[train],
size= 16, linout= T)
mlp.pred <- predict(mlp, regmat)
rmse(can$travail.dom[train], mlp.pred[train])
rmse(can$travail.dom[valid], mlp.pred[valid])
diagplot(can$travail.dom, mlp.pred, train, valid, title= "MLP")
library(ggplot2)
rmse(can$travail.dom[train], mlp.pred[train])
rmse(can$travail.dom[valid], mlp.pred[valid])
diagplot(can$travail.dom, mlp.pred, train, valid, title= "MLP")
permImpReg(can[valid, 1:11], can$travail.dom[valid], function(x) predict(mlp, toXmat(x)))
permImpReg(can[valid, 1:11], can$travail.dom[valid], function(x) predict(mlp, toXmat(x)))
permImpReg(can[valid, 1:11], can$travail.dom[valid], function(x) predict(mlp, toXmat(x)))
mlp <- nnet(x= regmat[train, ], y= can$travail.dom[train],
size= 32, linout= T)
diagplot(can$travail.dom, mlp.pred, train, valid, title= "MLP")
permImpReg(can[valid, 1:11], can$travail.dom[valid], function(x) predict(mlp, toXmat(x)))
mlp.pred <- predict(mlp, regmat)
diagplot(can$travail.dom, mlp.pred, train, valid, title= "MLP")
permImpReg(can[valid, 1:11], can$travail.dom[valid], function(x) predict(mlp, toXmat(x)))
partialBoxplotReg(can[valid, 1:11], function(x) predict(mlp, toXmat(x)), "fam.size")
partialBoxplotReg(can[valid, 1:11], function(x) predict(mlp, toXmat(x)), "age.grp")
partialBoxplotReg(can[valid, 1:11], function(x) predict(mlp, toXmat(x)), "mar.st")
deep <- keras_model_sequential() %>%
layer_dense(units= 16, activation= "selu", input_shape= ncol(regmat)) %>%
layer_alpha_dropout(.1) %>%
layer_dense(units= 16, activation= "selu") %>%
layer_dense(units= 16, activation= "selu") %>%
layer_dense(units= 16, activation= "selu") %>%
layer_dense(1, activation= "linear") %>%
compile(loss = 'mean_squared_error', optimizer = optimizer_adam())
library(keras)
deep <- keras_model_sequential() %>%
layer_dense(units= 16, activation= "selu", input_shape= ncol(regmat)) %>%
layer_alpha_dropout(.1) %>%
layer_dense(units= 16, activation= "selu") %>%
layer_dense(units= 16, activation= "selu") %>%
layer_dense(units= 16, activation= "selu") %>%
layer_dense(1, activation= "linear") %>%
compile(loss = 'mean_squared_error', optimizer = optimizer_adam())
deep
history <- deep %>% fit(
regmat[train, ], can$travail.dom[train],
epochs = 10, batch_size = 20,
validation_split = 0.1
)
plot(history)
deep.pred <- predict_on_batch(deep, regmat)
rmse(can$travail.dom[train], deep.pred[train])
rmse(can$travail.dom[valid], deep.pred[valid])
diagplot(can$travail.dom, deep.pred, train, valid, "deep")
permImpReg(can[valid, 1:11], can$travail.dom[valid], function(x) predict(deep, toXmat(x)))
partialBoxplotReg(can[test, 1:11], function(x) predict_on_batch(deep, toXmat(x)), "fam.size")
partialBoxplotReg(can[test, 1:11], function(x) predict_on_batch(deep, toXmat(x)), "age.grp")
############
## Random forest
library(ranger)
?ranger
############
## Random forest
library(ranger)
rf <- ranger(travail.dom ~ ., can[train, ])
rf.pred <- predict(rf, can)$predictions
plot(rf)
rf$r.squared
rf$prediction.error
rmse(can$travail.dom[train], rf.pred[train])
rmse(can$travail.dom[valid], rf.pred[valid])
diagplot(can$travail.dom, rf.pred, train, valid, title= "rf")
hist(can$travail.dom)
permImpReg(can[valid, 1:11], can$travail.dom[valid], function(x) predict(rf, x)$predictions)
partialBoxplotReg(can[valid, 1:11],
function(x) predict(rf, x)$predictions,
which.var = "fam.size")
partialBoxplotReg(can[valid, 1:11],
function(x) predict(rf, x)$predictions,
which.var = "age.gp")
partialBoxplotReg(can[valid, 1:11],
function(x) predict(rf, x)$predictions,
which.var = "mar.stat")
partialBoxplotReg(can[valid, 1:11],
function(x) predict(rf, x)$predictions,
which.var = "age.grp")
